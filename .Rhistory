cat("Next: Create GitHub repo manually and push your code!\n")
library(readr)
library(dplyr)
library(usethis)
# Read the raw data
raw_data <- read_csv("data-raw/raw_data/Rebstock_MagPenguinDeployments.csv")
# Read the raw data
raw_data <- read_csv("data-raw/raw_data/Rebstock_MagPenguinDeployments.csv")
# Examine the data structure
cat("Original data structure:\n")
str(raw_data)
cat("\nFirst few rows:\n")
head(raw_data)
cat("\nSummary:\n")
summary(raw_data)
# Clean and prepare the data for package inclusion
magellanic_penguins <- raw_data %>%
# Convert categorical variables to factors where appropriate
mutate(
InstrType = as.factor(InstrType),
PenguinSex = case_when(
PenguinSex == 1 ~ "Male",
PenguinSex == 2 ~ "Female",
TRUE ~ NA_character_
),
PenguinSex = as.factor(PenguinSex)
) %>%
# Arrange by season and penguin for logical ordering
arrange(SeasonYear, PenguinID)
# Verify the cleaned data
cat("\nCleaned data structure:\n")
str(magellanic_penguins)
cat("\nFinal summary:\n")
# Clean and prepare the data for package inclusion
magellanic_penguins <- raw_data %>%
# Convert categorical variables to factors where appropriate
mutate(
InstrType = as.factor(InstrType),
PenguinSex = case_when(
PenguinSex == 0 ~ "Male",
PenguinSex == 1 ~ "Female",
TRUE ~ NA_character_
),
PenguinSex = as.factor(PenguinSex)
) %>%
# Arrange by season and penguin for logical ordering
arrange(SeasonYear, PenguinID)
# Verify the cleaned data
cat("\nCleaned data structure:\n")
str(magellanic_penguins)
cat("\nFinal summary:\n")
summary(magellanic_penguins)
# Check for any missing values or issues
cat("\nMissing values per column:\n")
sapply(magellanic_penguins, function(x) sum(is.na(x)))
# Save to package data (compressed .rda format for CRAN)
usethis::use_data(magellanic_penguins, overwrite = TRUE)
cat("\n✅ Dataset 'magellanic_penguins' prepared and saved!\n")
cat("Size of final dataset:", object.size(magellanic_penguins), "bytes\n")
load("D:/dev/ecoteach/data/simple_data.rda")
load("D:/dev/ecoteach/data/magellanic_penguins.rda")
devtools::document()
data("magellanic_penguins")
head(magellanic_penguins)
source("data-raw/prepare_berberis_treatment.R")
devtools::document()
devtools::document()
data(berberis_treatment)
head(berberis_treatment)
library(readr)
library(dplyr)
library(usethis)
# Read the raw data
raw_data <- read_csv("data-raw/raw_data/Adriaens_etal_Neobiota_data.csv")
# Examine the data structure
cat("Original data structure:\n")
str(raw_data)
cat("\nFirst few rows:\n")
head(raw_data)
cat("\nSummary:\n")
summary(raw_data)
table(raw_data$regrowth)
table(raw_data$treatment)
# Data preparation for Berberis aquifolium Management Treatment Dataset
# Source: Adriaens et al. (2019) - Dryad repository
# DOI: 10.5061/DRYAD.ZKH189361
# License: CC0 1.0 Universal
# Prepared: [TODAY'S DATE]
library(readr)
library(dplyr)
library(usethis)
# Read the raw data
raw_data <- read_csv("data-raw/raw_data/Adriaens_etal_Neobiota_data.csv")
# Examine the data structure
cat("Original data structure:\n")
str(raw_data)
cat("\nFirst few rows:\n")
head(raw_data)
cat("\nSummary:\n")
summary(raw_data)
# Clean and prepare the data for package inclusion
berberis_treatment <- raw_data %>%
# Convert categorical variables to factors
mutate(
region = as.factor(region),
treatment = factor(treatment,
levels = c("Dig", "Leaf", "Stub", "Salt"),
labels = c("Manual digging", "Leaf spray (glyphosate)",
"Stem cut + glyphosate", "Stem cut + salt")),
regrowth = factor(regrowth,
levels = c("Dead", "Limited", "Vital"),
ordered = TRUE),
# Convert dates to proper date format
date = as.Date(date, format = "%d/%m/%Y"),
date_regrowth = as.Date(date_regrowth, format = "%d/%m/%Y")
) %>%
# Add derived variables for analysis
mutate(
# Calculate time between treatment and assessment
days_to_assessment = as.numeric(date_regrowth - date),
# Create binary success variable (Dead = successful treatment)
treatment_success = ifelse(regrowth == "Dead", "Success", "Failure"),
treatment_success = as.factor(treatment_success),
# Calculate clone volume approximation (assuming cylindrical)
volume_approx = pi * (diameter/2)^2 * height
) %>%
# Arrange logically
arrange(region, treatment, plant_id)
# Verify the cleaned data
cat("\nCleaned data structure:\n")
str(berberis_treatment)
cat("\nTreatment summary:\n")
table(berberis_treatment$treatment)
cat("\nRegrowth summary:\n")
table(berberis_treatment$regrowth)
cat("\nTreatment success by method:\n")
table(berberis_treatment$treatment, berberis_treatment$treatment_success)
# Check for any missing values or issues
cat("\nMissing values per column:\n")
sapply(berberis_treatment, function(x) sum(is.na(x)))
# Save to package data (compressed .rda format for CRAN)
usethis::use_data(berberis_treatment, overwrite = TRUE)
cat("\n✅ Dataset 'berberis_treatment' prepared and saved!\n")
cat("Size of final dataset:", object.size(berberis_treatment), "bytes\n")
#' Berberis aquifolium Invasive Species Management Treatment Data
#'
#' Experimental data from a management treatment study of invasive Berberis
#' aquifolium (Oregon grape) plants conducted across four heavily infested
#' dune sites in Belgium. The study evaluated the effectiveness of different
#' management treatments on individual plants, with regrowth assessments
#' conducted at 6 months and 1 year post-treatment.
#'
#' @format A data frame with 127 rows and 14 variables:
#' \describe{
#'   \item{plant_id}{Character, unique identifier for each B. aquifolium plant/clone}
#'   \item{region}{Factor, field code identifying the dune site location}
#'   \item{date}{Date, when the plant was initially located and treated (April/May 2013)}
#'   \item{treatment}{Factor, management treatment applied:
#'     \itemize{
#'       \item Manual digging - Uprooting by digging with shovels
#'       \item Leaf spray (glyphosate) - 5\% Roundup Max foliar application
#'       \item Stem cut + glyphosate - Cut and paint with 5\% glyphosate
#'       \item Stem cut + salt - Cut and treat with saturated NaCl solution
#'     }}
#'   \item{height}{Integer, plant height in centimeters}
#'   \item{diameter}{Integer, clone diameter in centimeters (range: 10-600 cm)}
#'   \item{n_stems}{Integer, number of stems per individual plant/clone}
#'   \item{date_regrowth}{Date, date of regrowth assessment (Nov 2013 or May 2014)}
#'   \item{regrowth}{Ordered factor, stem regrowth response:
#'     \itemize{
#'       \item dead - No regrowth observed (treatment success)
#'       \item limited regrowth - Some regrowth but restricted
#'       \item vigorous regrowth - Strong regrowth response
#'     }}
#'   \item{x_proj}{Numeric, X-coordinate of plant location (GPS projection)}
#'   \item{y_proj}{Numeric, Y-coordinate of plant location (GPS projection)}
#'   \item{days_to_assessment}{Numeric, days between treatment and assessment}
#'   \item{treatment_success}{Factor, binary outcome (Success/Failure)}
#'   \item{volume_approx}{Numeric, approximate plant volume (π × (diameter/2)² × height)}
#' }
#' @details
#' This dataset represents a controlled field experiment designed to compare
#' invasive species control techniques. Plants were treated in April/May 2013,
#' with follow-up assessments at 6 months and 1 year. The 5\% glyphosate
#' concentration used exceeds standard recommendations (1.5-2\%) for leaf
#' treatment. Nine of the original 127 treated clones could not be relocated
#' during follow-up assessments.
#'
#' Treatments were applied with spatial separation (minimum 10 meters apart)
#' and all ramets within a clone received the same treatment. This dataset
#' is valuable for teaching experimental design, invasive species management,
#' and conservation ecology concepts.
#'
#' @source Adriaens, T., Verschelde, P., Cartuyvels, E., D'hondt, B.,
#'   Vercruysse, E., Gompel, W.V., Dewulf, E., & Provoost, S. (2019).
#'   Data from: A preliminary field trial to compare control techniques for
#'   invasive Berberis aquifolium in Belgian coastal dunes. Dryad Digital
#'   Repository. \doi{10.5061/DRYAD.ZKH189361}
#' @references Adriaens, T., Verschelde, P., Cartuyvels, E., D'hondt, B.,
#'   Vercruysse, E., Gompel, W.V., Dewulf, E., & Provoost, S. (2019).
#'   A preliminary field trial to compare control techniques for invasive
#'   Berberis aquifolium in Belgian coastal dunes. NeoBiota, 53, 27-49.
#' @examples
#' \donttest{
#' # Load the dataset
#' data(berberis_treatment)
#'
#' # Basic exploration
#' head(berberis_treatment)
#' summary(berberis_treatment)
#'
#' # Treatment effectiveness summary
#' table(berberis_treatment$treatment, berberis_treatment$regrowth)
#'
#' # Calculate success rates by treatment
#' success_rates <- berberis_treatment %>%
#'   group_by(treatment) %>%
#'   summarise(
#'     total = n(),
#'     success = sum(regrowth == "dead"),
#'     success_rate = round(success/total * 100, 1)
#'   )
#' print(success_rates)
#'
#' # Visualize treatment effectiveness
#' barplot(table(berberis_treatment$treatment, berberis_treatment$regrowth),
#'         beside = TRUE, legend = TRUE,
#'         main = "Treatment Effectiveness for Invasive Berberis",
#'         xlab = "Regrowth Response", ylab = "Number of Plants")
#'
#' # Examine relationship between plant size and treatment success
#' boxplot(height ~ treatment_success, data = berberis_treatment,
#'         main = "Plant Height vs Treatment Success",
#'         xlab = "Treatment Outcome", ylab = "Height (cm)")
#' }
"berberis_treatment"
#' Berberis aquifolium Invasive Species Management Treatment Data
#'
#' Experimental data from a management treatment study of invasive Berberis
#' aquifolium (Oregon grape) plants conducted across four heavily infested
#' dune sites in Belgium. The study evaluated the effectiveness of different
#' management treatments on individual plants, with regrowth assessments
#' conducted at 6 months and 1 year post-treatment.
#'
#' @format A data frame with 127 rows and 14 variables:
#' \describe{
#'   \item{plant_id}{Character, unique identifier for each B. aquifolium plant/clone}
#'   \item{region}{Factor, field code identifying the dune site location}
#'   \item{date}{Date, when the plant was initially located and treated (April/May 2013)}
#'   \item{treatment}{Factor, management treatment applied:
#'     \itemize{
#'       \item Manual digging - Uprooting by digging with shovels
#'       \item Leaf spray (glyphosate) - 5\% Roundup Max foliar application
#'       \item Stem cut + glyphosate - Cut and paint with 5\% glyphosate
#'       \item Stem cut + salt - Cut and treat with saturated NaCl solution
#'     }}
#'   \item{height}{Integer, plant height in centimeters}
#'   \item{diameter}{Integer, clone diameter in centimeters}
#'   \item{n_stems}{Integer, number of stems per individual plant/clone}
#'   \item{date_regrowth}{Date, date of regrowth assessment}
#'   \item{regrowth}{Ordered factor, stem regrowth response (Dead < Limited < Vital)}
#'   \item{x_proj}{Numeric, X-coordinate of plant location (GPS projection)}
#'   \item{y_proj}{Numeric, Y-coordinate of plant location (GPS projection)}
#'   \item{days_to_assessment}{Numeric, days between treatment and assessment}
#'   \item{treatment_success}{Factor, binary outcome (Success/Failure)}
#'   \item{volume_approx}{Numeric, approximate plant volume}
#' }
#' @source Adriaens, T., Verschelde, P., Cartuyvels, E., D'hondt, B.,
#'   Vercruysse, E., Gompel, W.V., Dewulf, E., & Provoost, S. (2019).
#'   Data from: A preliminary field trial to compare control techniques for
#'   invasive Berberis aquifolium in Belgian coastal dunes. Dryad Digital
#'   Repository. \doi{10.5061/DRYAD.ZKH189361}
#' @examples
#' \donttest{
#' # Load the dataset
#' data(berberis_treatment)
#'
#' # Treatment effectiveness summary
#' table(berberis_treatment$treatment, berberis_treatment$regrowth)
#'
#' # Visualize treatment effectiveness
#' barplot(table(berberis_treatment$treatment, berberis_treatment$regrowth),
#'         beside = TRUE, legend = TRUE,
#'         main = "Treatment Effectiveness for Invasive Berberis")
#' }
"berberis_treatment"
devtools::document()
data(berberis_treatment)
head(berberis_treatment)
table(berberis_treatment$treatment, berberis_treatment$regrowth)
devtools::check()
devtools::install()
data(ecotools)
data(magellanic_penguins)
data(berberis_treatment)
force(magellanic_penguins)
View(magellanic_penguins)
force(berberis_treatment)
View(berberis_treatment)
?berneris_treatment
?berberis_treatment
table(berberis_treatment$treatment, berberis_treatment$regrowth)
barplot(table(berberis_treatment$treatment, berberis_treatment$regrowth),
beside = TRUE, legend = TRUE,
main = "Treatment Effectiveness for Invasive Berberis")
git add .
?ecoteach
?berberis_treatment
barplot(table(berberis_treatment$treatment, berberis_treatment$regrowth),
beside = TRUE, legend = TRUE,
main = "Treatment Effectiveness for Invasive Berberis")
boxplot(berberis_treatment$regrowth~berberis_treatment$treatment)
hist(berberis_treatment$regrowth)
boxplot(berberis_treatment$volume_approx~berberis_treatment$treatment)
boxplot(log(berberis_treatment$volume_approx)~berberis_treatment$treatment)
?ecoteach
?berberis_treatment
View(magellanic_penguins)
?magellanic_penguins
source("dataset_helper.R")
source("raw-data/dataset_helper.R")
source("raw-data\dataset_helper.R")
source("raw_data/dataset_helper.R")
source("raw-data/raw_data/dataset_helper.R")
source("data-raw/raw_data/dataset_helper.R")
# Complete helper to automate dataset addition with .bib file parsing
# Parse .bib file to extract citation info
parse_bib_file <- function(bib_filename) {
bib_path <- paste0("data-raw/raw_data/", bib_filename)
if (!file.exists(bib_path)) {
stop("BibTeX file not found: ", bib_path)
}
# Read the .bib file
bib_lines <- readLines(bib_path)
bib_text <- paste(bib_lines, collapse = "\n")
# Extract key information using regex
extract_field <- function(field_name, text) {
pattern <- paste0(field_name, "\\s*=\\s*\\{([^}]+)\\}")
match <- regexpr(pattern, text, ignore.case = TRUE, perl = TRUE)
if (match != -1) {
start <- attr(match, "capture.start")
length <- attr(match, "capture.length")
return(substr(text, start, start + length - 1))
}
return(NA)
}
# Extract fields
title <- extract_field("title", bib_text)
author <- extract_field("author", bib_text)
year <- extract_field("year", bib_text)
doi <- extract_field("doi", bib_text)
publisher <- extract_field("publisher", bib_text)
# Clean up text
clean_text <- function(text) {
if (is.na(text)) return(text)
text <- gsub("\\{|\\}", "", text)
text <- gsub("\\s+", " ", text)
text <- trimws(text)
return(text)
}
return(list(
title = clean_text(title),
author = clean_text(author),
year = clean_text(year),
doi = clean_text(doi),
publisher = clean_text(publisher)
))
}
# Main function - creates dataset with automatic .bib parsing
auto_dataset_setup <- function(dataset_name, csv_filename, bib_filename) {
cat("🚀 Setting up dataset:", dataset_name, "\n")
cat("📖 Parsing BibTeX file:", bib_filename, "\n")
# Parse the .bib file
bib_info <- parse_bib_file(bib_filename)
# Show what was extracted
cat("\n📋 Extracted citation information:\n")
cat("Title:", bib_info$title, "\n")
cat("Author:", bib_info$author, "\n")
cat("Year:", bib_info$year, "\n")
cat("DOI:", bib_info$doi, "\n")
# Create preparation script
prep_file <- paste0("data-raw/prepare_", dataset_name, ".R")
prep_content <- paste0('# Data preparation for ', bib_info$title, '
# Source: ', bib_info$author, ' (', bib_info$year, ') - Dryad repository
# DOI: ', bib_info$doi, '
# License: CC0 1.0 Universal
library(readr)
library(dplyr)
library(usethis)
# Read the raw data
raw_data <- read_csv("data-raw/raw_data/', csv_filename, '")
# Examine the data structure
cat("Original data structure:\\n")
str(raw_data)
head(raw_data)
# Check unique values in key columns
# sapply(raw_data[c("column1", "column2")], function(x) unique(x))
# Clean and prepare the data
', dataset_name, ' <- raw_data %>%
# Add your factor conversions here
# mutate(column_name = as.factor(column_name)) %>%
arrange()  # Add appropriate sorting
# Check the cleaned data
str(', dataset_name, ')
# Save to package data
usethis::use_data(', dataset_name, ', overwrite = TRUE)
cat("✅ Dataset saved!\\n")
')
writeLines(prep_content, prep_file)
# Create documentation script
doc_file <- paste0("R/", dataset_name, ".R")
doc_content <- paste0('#\' ', bib_info$title, '
#\'
#\' [ADD DETAILED DESCRIPTION HERE]
#\'
#\' @format A data frame with [X] rows and [Y] variables:
#\' \\describe{
#\'   \\item{column1}{Description of column 1}
#\'   \\item{column2}{Description of column 2}
#\' }
#\' @source ', bib_info$author, ' (', bib_info$year, '). ', bib_info$title, '.
#\'   ', bib_info$publisher, ' Digital Repository. \\doi{', bib_info$doi, '}
#\' @examples
#\' \\donttest{
#\' data(', dataset_name, ')
#\' head(', dataset_name, ')
#\' summary(', dataset_name, ')
#\' }
"', dataset_name, '"
')
writeLines(doc_content, doc_file)
cat("✅ Created preparation script:", prep_file, "\n")
cat("✅ Created documentation script:", doc_file, "\n")
cat("\n📋 Next steps:\n")
cat("1. Edit", prep_file, "\n")
cat("2. Run: source('", prep_file, "')\n")
cat("3. Edit", doc_file, "\n")
cat("4. Run: devtools::document()\n")
}
# Preview what's in a .bib file
preview_bib <- function(bib_filename) {
bib_info <- parse_bib_file(bib_filename)
cat("📖 BibTeX Preview:\n")
cat("Title:", bib_info$title, "\n")
cat("Author:", bib_info$author, "\n")
cat("Year:", bib_info$year, "\n")
cat("DOI:", bib_info$doi, "\n")
}
auto_data_setup
auto_dataset_setup
auto_dataset_setup(dataset_name = 'vulture_diet',
csv_filename = 'baino_etal_2021_vulture_diet.csv',
bib_filename = 'baino_etal_2021_vulture_diet.bib')
library(readr)
library(dplyr)
library(usethis)
# Read the raw data
raw_data <- read_csv("data-raw/raw_data/baino_etal_2021_vulture_diet.csv")
# Clean and prepare the data
vulture_diet <- raw_data %>%
# Add your factor conversions here
mutate(
species = as.factor(species),
tissue = as.factor(tissue)
# mutate(column_name = as.factor(column_name)) %>%
# arrange()  # Add appropriate sorting
)
# Check the cleaned data
str(vulture_diet)
# Save to package data
usethis::use_data(vulture_diet, overwrite = TRUE)
cat("✅ Dataset saved!\n")
devtools:install()
devtools::install()
library(ecoteach)
?ecoteach
data(simple_data)
force(simple_data)
data(magellanic_penguins)
force(magellanic_penguins)
?(magellanic_penguins)
help(magellanic_penguins)
boxplot(TripDistMean~PenguinSex, data = magellanic_penguins)
t.test(TripDistMean~PenguinSex, data = magellanic_penguins)
hist(residuals(lm(TripDistMean~PenguinSex, data = magellanic_penguins)))
t.test(TripDistMean~PenguinSex, data = magellanic_penguins)
boxplot(TripDistMean~PenguinSex, data = magellanic_penguins)
boxplot(log(TripDistMean)~PenguinSex, data = magellanic_penguins)
t.test(log(TripDistMean)~PenguinSex, data = magellanic_penguins)
hist(residuals(lm(log(TripDistMean)~PenguinSex, data = magellanic_penguins)))
?elephant_farmers
# install from github
devtools::install_github('weharris/ecoteach')
library(ecoteach)
# List all available datasets
data(package = "ecoteach")$results[, "Item"]
# Load the dataset
data(dormouse_hibernation)
data(dormouse_hibernation)
library(ecoteach)
data("dormouse_hibernation")
library(ecoteach)
# Load the dataset
data(dormouse_hibernation)
## ----dataset_list-------------------------------------------------------------
# List all available datasets
data(package = "ecoteach")$results[, "Item"]
ecoteach$name
library(ecoteach)
ecoteach$name
data(package = "ecoteach")$results[, "Item"]
devtools:install_github("weharris/ecoteach")
