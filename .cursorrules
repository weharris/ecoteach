# R Package Development Rules for Cursor IDE

## Context
You are helping develop an R package called "ecoteach" that contains curated educational datasets for ecology and agriculture students. The package follows CRAN standards and uses modern R package development practices.

## Package Structure
```
ecoteach/
├── DESCRIPTION          # Package metadata
├── NAMESPACE           # Exports/imports (auto-generated)
├── LICENSE             # MIT license
├── README.Rmd          # Package description (knits to README.md)
├── R/                  # R functions and data documentation
├── data/               # Processed datasets (.rda files)
├── data-raw/           # Raw data and processing scripts
│   ├── raw_data/       # Original CSV and .bib files
│   ├── dataset_helper.R # Automation functions
│   └── prepare_*.R     # Dataset preparation scripts
├── man/                # Auto-generated documentation
├── tests/              # Package tests
└── .cursorrules        # This file
```

## Core Principles

### 1. CRAN Compliance
- All datasets must be <5MB individually
- Use CC0 or compatible licenses only
- Complete documentation required for all datasets
- No browser storage APIs (localStorage, sessionStorage)
- Use `\donttest{}` around slow examples

### 2. Dataset Standards
- Data stored as compressed .rda files in data/ folder
- Raw data processing scripts in data-raw/
- Each dataset needs documentation in R/ folder
- Use factors for categorical variables
- Include proper citations with DOI
- Add meaningful teaching examples

### 3. Automation Workflow
The package includes automation helpers in `data-raw/dataset_helper.R`:

```r
# Quick setup with automatic .bib parsing
auto_dataset_setup("dataset_name", "file.csv", "file.bib")

# Manual setup  
quick_dataset_setup("dataset_name", "file.csv", "description", "doi", year, "citation")

# Preview .bib file contents
preview_bib("file.bib")
```

## Running R Commands in Cursor IDE

### Reliable Command Execution
When running R commands in Cursor IDE with Git Bash on Windows, use the following approaches:

1. **Use R with -e flag for single commands**:
   ```bash
   R -e "print('Hello world')"
   ```

2. **Source R scripts directly**:
   ```bash
   R -e "source('data-raw/prepare_dataset.R')"
   ```

3. **Run package development commands**:
   ```bash
   # Generate documentation
   R -e "devtools::document()"
   
   # Check package
   R -e "devtools::check()"
   
   # Load package for testing
   R -e "devtools::load_all()"
   ```

4. **Process a dataset from start to finish**:
   ```bash
   # Create dataset files
   R -e "source('data-raw/dataset_helper.R')"
   R -e "auto_dataset_setup('dataset_name', 'file.csv', 'file.bib')"
   
   # Process the dataset
   R -e "source('data-raw/prepare_dataset.R')"
   
   # Generate documentation
   R -e "devtools::document()"
   ```

### Important Notes
- Avoid starting interactive R sessions in the terminal
- Always use double quotes inside single quotes or escape properly
- For complex operations, create a small R script and source it
- Avoid using semicolons to combine multiple R commands in a single terminal command
- Run one command at a time for better reliability
- If a command fails, try simplifying it or breaking it into smaller parts

## When Writing R Code

### Package Development Commands
Always use these standard commands:
```r
# Load development tools
library(devtools)
library(usethis)

# Generate documentation from roxygen comments
devtools::document()

# Check package for errors
devtools::check()

# Load package for testing
devtools::load_all()

# Install package locally
devtools::install()

# Build README from README.Rmd
devtools::build_readme()
```

### Data Preparation Scripts
Template for `data-raw/prepare_*.R` files:
```r
# Data preparation for [DATASET NAME]
# Source: [AUTHORS] ([YEAR]) - Repository
# DOI: [DOI]
# License: CC0 1.0 Universal

library(readr)
library(dplyr)
library(usethis)

# Read raw data
raw_data <- read_csv("data-raw/raw_data/filename.csv")

# Examine structure
str(raw_data)
head(raw_data)

# Clean data
dataset_name <- raw_data %>%
  mutate(
    # Convert factors with proper levels
    categorical_var = factor(categorical_var, levels = c("level1", "level2")),
    # Convert dates with proper format
    date_var = as.Date(date_var, format = "%d/%m/%Y")
  ) %>%
  arrange(logical_order)

# Save to package
usethis::use_data(dataset_name, overwrite = TRUE)
```

### Data Documentation Template
Template for `R/dataset_name.R` files:
```r
#' Dataset Title
#'
#' Detailed description of the dataset, including context,
#' collection methods, and educational applications.
#'
#' @format A data frame with X rows and Y variables:
#' \describe{
#'   \item{var1}{Description of variable 1}
#'   \item{var2}{Description of variable 2}
#' }
#' @source Author, A. et al. (YEAR). Title. Publisher. \doi{DOI}
#' @examples
#' \donttest{
#' data(dataset_name)
#' head(dataset_name)
#' summary(dataset_name)
#' 
#' # Teaching example
#' plot(dataset_name$x, dataset_name$y)
#' }
"dataset_name"
```

## File Operations

### Always Check These Before Coding:
1. What's the exact structure of the CSV data?
2. What are the unique values in categorical columns?
3. What date format is used?
4. Are there missing values?

### Common File Paths:
- Raw data: `data-raw/raw_data/`
- Preparation scripts: `data-raw/prepare_*.R`
- Documentation: `R/*.R`
- Generated data: `data/*.rda`

## Git Workflow
```bash
# Check status
git status

# Add files
git add .

# Commit with meaningful message
git commit -m "Add [dataset_name] dataset with documentation"

# Push to GitHub
git push
```

## Error Handling

### Common Issues:
1. **Factor level mismatches**: Always check `unique(column)` before setting factor levels
2. **Date parsing errors**: Verify date format with sample data
3. **Missing values**: Handle NAs appropriately
4. **Documentation errors**: Use exact syntax for roxygen2

### Debugging Steps:
1. Check data structure: `str(data)`
2. Check unique values: `unique(data$column)`
3. Check for NAs: `sum(is.na(data$column))`
4. Test documentation: `devtools::document()`
5. Run package check: `devtools::check()`

## Code Style

### Naming Conventions:
- Datasets: `snake_case` (e.g., `vulture_diet`)
- Functions: `snake_case` (e.g., `auto_dataset_setup`)
- Variables: `snake_case`
- Files: `snake_case.R`

### Comments:
- Use `#'` for roxygen documentation
- Use `#` for code comments
- Include source citations in preparation scripts
- Explain complex data transformations

## Testing
- Always test data loading: `data(dataset_name)`
- Verify data structure: `str(dataset_name)`
- Check examples work: Run code in @examples
- Run full package check: `devtools::check()`

## When Helping with Code:
1. Always verify file paths exist
2. Check data structure before assuming column names
3. Use proper roxygen2 syntax for documentation
4. Include CRAN-compliant examples
5. Follow the established automation workflow
6. Test that code actually works

Remember: This is an educational package, so examples should be meaningful for teaching ecology and agriculture concepts.
## Working with Files in Cursor IDE (Windows Environment)

### Effective File Creation/Editing Methods:
1. **Use R for file operations**: 
   ```bash
   R -e "writeLines(c('line1', 'line2'), 'filename.R')"
   ```

2. **Run R scripts directly**:
   ```bash
   R -e "source('data-raw/prepare_dataset.R')"
   ```

3. **Use the dataset_helper.R functions**:
   ```bash
   R -e "source('data-raw/dataset_helper.R')"
   R -e "auto_dataset_setup('dataset_name', 'file.csv', 'file.bib')"
   ```

### Avoid These Approaches:
1. Do not use heredoc (`<<`) syntax in Windows Git Bash
2. Avoid complex multiline commands in terminal
3. Do not use echo with special characters/quotes without proper escaping

### Best Practices:
1. Create files through R functions when possible
2. For complex file content, create the file first, then edit it
3. Use existing templates and helper functions in dataset_helper.R
4. Test commands with simple examples before running complex operations
