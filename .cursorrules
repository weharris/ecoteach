# R Package Development Rules for Cursor IDE

Rule number 1: Your name is Jeff.

Rule number 2: NEVER run more than 1 R bash command separated by semicolons.  Always run 1 command at a time.

# ⚠️ CRITICAL: GIT OPERATIONS ⚠️
# 
# DO NOT PERFORM GIT OPERATIONS AUTOMATICALLY
# 
# - The user will handle all git operations (add, commit, push) manually
# - DO NOT suggest git commands or workflows unless explicitly asked
# - DO NOT automatically commit changes or suggest committing after operations
# - Focus ONLY on R package development tasks, not version control
#
# This rule takes precedence over any other git-related instructions in this file.

## Context
You are helping develop an R package called "ecoteach" that contains curated educational datasets for ecology and agriculture students. The package follows CRAN standards and uses modern R package development practices.

# ⚠️ CRITICAL: RUNNING R COMMANDS IN CURSOR IDE ⚠️

## REQUIRED COMMAND FORMAT
When running R commands in Cursor IDE with Git Bash on Windows, you MUST:

1. **ALWAYS use the R -e flag with proper quoting**:
   ```bash
   R -e "source('data-raw/dataset_helper.R')"
   ```

2. **ALWAYS source helper files before using their functions**:
   ```bash
   # CORRECT - Source first, then use function
   R -e "source('data-raw/dataset_helper.R'); auto_dataset_setup('dataset_name', 'file.csv', 'file.bib')"
   
   # WRONG - Will fail because function is not in scope
   R -e "auto_dataset_setup('dataset_name', 'file.csv', 'file.bib')"
   ```

3. **ALWAYS use double quotes inside single quotes**:
   ```bash
   # CORRECT
   R -e "library(dplyr); filter(data, column == 'value')"
   
   # WRONG - Will cause syntax errors
   R -e 'library(dplyr); filter(data, column == "value")'
   ```

4. **NEVER use interactive R sessions in terminal**

5. **⚠️ CRITICAL: Run one command at a time - NEVER chain multiple R processes together**:
   ```bash
   # CORRECT - Run operations separately
   R -e "devtools::document()"
   # Then in a separate command:
   R -e "devtools::check()"
   
   # WRONG - Will likely hang or fail
   R -e "devtools::document()" && R -e "devtools::check()"
   # or
   R -e "devtools::document(); devtools::check()"
   ```

6. **For complex operations like package checks, disable interactive features**:
   ```bash
   # Use these options for devtools::check to prevent hanging
   R -e "options(devtools.name = 'Your name'); devtools::check(cran = FALSE)"
   ```

7. **If a command fails or hangs, check the error and refer back to these rules**

## Package Structure
```
ecoteach/
├── DESCRIPTION          # Package metadata
├── NAMESPACE           # Exports/imports (auto-generated)
├── LICENSE             # MIT license
├── README.Rmd          # Package description (knits to README.md)
├── R/                  # R functions and data documentation
├── data/               # Processed datasets (.rda files)
├── data-raw/           # Raw data and processing scripts
│   ├── raw_data/       # Original CSV and .bib files
│   ├── dataset_helper.R # Automation functions
│   └── prepare_*.R     # Dataset preparation scripts
├── man/                # Auto-generated documentation
├── tests/              # Package tests
└── .cursorrules        # This file
```

## Core Principles

### 1. CRAN Compliance
- All datasets must be <5MB individually
- Use CC0 or compatible licenses only
- Complete documentation required for all datasets
- No browser storage APIs (localStorage, sessionStorage)
- Use `\donttest{}` around slow examples
- Always update the ecoteach-package.R file after adding a new dataset 

### 2. Dataset Standards
- Data stored as compressed .rda files in data/ folder
- Raw data processing scripts in data-raw/
- Each dataset needs documentation in R/ folder
- Use factors for categorical variables
- Include proper citations with DOI
- Add meaningful teaching examples

### 3. Automation Workflow
The package includes automation helpers in `data-raw/dataset_helper.R`:

```r
# Quick setup with automatic .bib parsing
auto_dataset_setup("dataset_name", "file.csv", "file.bib")

# Manual setup  
quick_dataset_setup("dataset_name", "file.csv", "description", "doi", year, "citation")

# Preview .bib file contents
preview_bib("file.bib")
```

## Standard Dataset Workflow

### 1. Create Dataset Files
```bash
# ALWAYS source the helper file first
R -e "source('data-raw/dataset_helper.R'); auto_dataset_setup('dataset_name', 'file.csv', 'file.bib')"
```

### 2. Process the Dataset
```bash
# Run as a separate command after step 1 completes
R -e "source('data-raw/prepare_dataset_name.R')"
```

### 3. Generate Documentation
```bash
# Run as a separate command after step 2 completes
R -e "devtools::document()"
```

### 4. Check the Package
```bash
# Run as a separate command after step 3 completes
# For more reliable execution, use these options:
R -e "options(devtools.name = 'Your name'); devtools::check(cran = FALSE)"
```

### 5. Version Control
The user will handle all Git operations manually. Do not suggest or perform Git operations unless explicitly asked.

## When Writing R Code

### Package Development Commands
Always use these standard commands:
```r
# Load development tools
library(devtools)
library(usethis)

# Generate documentation from roxygen comments
devtools::document()

# Check package for errors
devtools::check()

# Load package for testing
devtools::load_all()

# Install package locally
devtools::install()

# Build README from README.Rmd
devtools::build_readme()
```

### Data Preparation Scripts
Template for `data-raw/prepare_*.R` files:
```r
# Data preparation for [DATASET NAME]
# Source: [AUTHORS] ([YEAR]) - Repository
# DOI: [DOI]
# License: CC0 1.0 Universal

library(readr)
library(dplyr)
library(usethis)

# Read raw data
raw_data <- read_csv("data-raw/raw_data/filename.csv")

# Examine structure
str(raw_data)
head(raw_data)

# Clean data
dataset_name <- raw_data %>%
  mutate(
    # Convert factors with proper levels
    categorical_var = factor(categorical_var, levels = c("level1", "level2")),
    # Convert dates with proper format
    date_var = as.Date(date_var, format = "%d/%m/%Y")
  ) %>%
  arrange(logical_order)

# Save to package
usethis::use_data(dataset_name, overwrite = TRUE)
```

### Data Documentation Template
Template for `R/dataset_name.R` files:
```r
#' Dataset Title
#'
#' Detailed description of the dataset, including context,
#' collection methods, and educational applications.
#'
#' @format A data frame with X rows and Y variables:
#' \describe{
#'   \item{var1}{Description of variable 1}
#'   \item{var2}{Description of variable 2}
#' }
#' @source Author, A. et al. (YEAR). Title. Publisher. \doi{DOI}
#' @examples
#' \donttest{
#' data(dataset_name)
#' head(dataset_name)
#' summary(dataset_name)
#' 
#' # Teaching example
#' plot(dataset_name$x, dataset_name$y)
#' }
"dataset_name"
```

## File Operations

### Always Check These Before Coding:
1. What's the exact structure of the CSV data?
2. What are the unique values in categorical columns?
3. What date format is used?
4. Are there missing values?

### Common File Paths:
- Raw data: `data-raw/raw_data/`
- Preparation scripts: `data-raw/prepare_*.R`
- Documentation: `R/*.R`
- Generated data: `data/*.rda`

## Git Workflow

DO NOT PERFORM THESE OPERATIONS AUTOMATICALLY. The user will handle all Git operations manually.

Only provide Git commands if explicitly asked by the user. Otherwise, focus solely on R package development tasks.

## Error Handling

### Common Issues:
1. **Factor level mismatches**: Always check `unique(column)` before setting factor levels
2. **Date parsing errors**: Verify date format with sample data
3. **Missing values**: Handle NAs appropriately
4. **Documentation errors**: Use exact syntax for roxygen2

### Debugging Steps:
1. Check data structure: `str(data)`
2. Check unique values: `unique(data$column)`
3. Check for NAs: `sum(is.na(data$column))`
4. Test documentation: `devtools::document()`
5. Run package check: `devtools::check()`

## Code Style

### Naming Conventions:
- Datasets: `snake_case` (e.g., `vulture_diet`)
- Functions: `snake_case` (e.g., `auto_dataset_setup`)
- Variables: `snake_case`
- Files: `snake_case.R`

### Comments:
- Use `#'` for roxygen documentation
- Use `#` for code comments
- Include source citations in preparation scripts
- Explain complex data transformations

## Testing
- Always test data loading: `data(dataset_name)`
- Verify data structure: `str(dataset_name)`
- Check examples work: Run code in @examples
- Run full package check: `devtools::check()`

## Working with Files in Cursor IDE (Windows Environment)

### Effective File Creation/Editing Methods:
1. **Use R for file operations**: 
   ```bash
   R -e "writeLines(c('line1', 'line2'), 'filename.R')"
   ```

2. **Run R scripts directly**:
   ```bash
   R -e "source('data-raw/prepare_dataset.R')"
   ```

3. **Use the dataset_helper.R functions**:
   ```bash
   R -e "source('data-raw/dataset_helper.R'); auto_dataset_setup('dataset_name', 'file.csv', 'file.bib')"
   ```

### Avoid These Approaches:
1. Do not use heredoc (`<<`) syntax in Windows Git Bash
2. Avoid complex multiline commands in terminal
3. Do not use echo with special characters/quotes without proper escaping

### Best Practices:
1. Create files through R functions when possible
2. For complex file content, create the file first, then edit it
3. Use existing templates and helper functions in dataset_helper.R
4. Test commands with simple examples before running complex operations
